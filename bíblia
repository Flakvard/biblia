#!/bin/bash

# Change to the directory of the script
cd "$(dirname "${BASH_SOURCE[0]}")" || exit

# 66 books confirmed
books=("Fyrsta Mósebók" "Onnur Mósebók" "Triðja Mósebók" "Fjórða Mósebók" "Fimta Mósebók" "Jósvabók" "Dómarabókin" "Rutarbók" "Fyrra Sámuelsbók" "Seinna Sámuelsbók" "Fyrra Kongabók" "Seinna Kongabók" "Fyrra Krýnikubók" "Seinna Krýnikubók" "Ezra" "Nehemia" "Esterarbók" "Jobsbók" "Sálmarnir" "Orðtøk Sálomons" "Prædikarin" "Hásongurin" "Jesaja" "Jeremia" "Harmljóðini" "Ezekiel" "Dánjal" "Hósea" "Jóel" "Ámos" "Óbadia" "Jónas" "Mika" "Náhum" "Hábakkuk" "Sefanja" "Haggai" "Zakarja" "Málaki" "Evangeliið eftir Matteus" "Evangeliið eftir Markus" "Evangeliið eftir Lukas" "Evangeliið eftir Jóhannes" "Ápostlasøgan" "Bræv Paulusar ápostuls til Rómverja" "Fyrra bræv Paulusar ápostuls til Korintmanna" "Seinna bræv Paulusar ápostuls til Korintmanna" "Bræv Paulusar ápostuls til Galatamanna" "Bræv Paulusar ápostuls til Efesusmanna" "Bræv Paulusar ápostuls til Filippimanna" "Bræv Paulusar ápostuls til Kolossumanna" "Fyrra bræv Paulusar ápostuls til Tessalónikumanna" "Seinna bræv Paulusar ápostuls til Tessalónikumanna" "Fyrra bræv Paulusar ápostuls til Timoteusar" "Seinna bræv Paulusar ápostuls til Timoteusar" "Bræv Paulusar ápostuls til Titusar" "Bræv Paulusar ápostuls til Filemons" "Brævið til Hebreara" "Hitt almenna bræv Jákups" "Hitt fyrra almenna bræv Pæturs" "Hitt seinna almenna bræv Pæturs" "Hitt fyrsta almenna bræv Jóhannesar" "Annað bræv Jóhannesar" "Triðja bræv Jóhannesar" "Hitt almenna bræv Judasar" "Jóhannesar opinbering")

# 66 books confirmed
enBooks=("Genesis" "Exodus" "Leviticus" "Numbers" "Deuteronomy" "Joshua" "Judges" "Ruth" "1 Samuel" "2 Samuel" "1 Kings" "2 Kings" "1 Chronicles" "2 Chronicles" "Ezra" "Nehemiah" "Esther" "Job" "Psalms" "Proverbs" "Ecclesiastes" "Song of Solomon" "Isaiah" "Jeremiah" "Lamentations" "Ezekiel" "Daniel" "Hosea" "Joel" "Amos" "Obadiah" "Jonah" "Micah" "Nahum" "Habakkuk" "Zephaniah" "Haggai" "Zechariah" "Malachi" "Matthew" "Mark" "Luke" "John" "The Acts" "Romans" "1 Corinthians" "2 Corinthians" "Galatians" "Ephesians" "Philippians" "Colossians" "1 Thessalonians" "2 Thessalonians" "1 Timothy" "2 Timothy" "Titus" "Philemon" "Hebrews" "James" "1 Peter" "2 Peter" "1 John" "2 John" "3 John" "Jude" "Revelation")

apocryphaBooks=("The First Book of Esdras" "The Second book of Esdras" "The Greek Addition to Esther" "The First Book of The Maccabees" "The Second Book of the Maccabees" "The Book of Tobit" "The Book of Judith" "The Wisdom of Solomon" "The Book of Sirach (or Ecclesiasticus)" "The Book of Baruch" "The Epistle (or letter) of Jeremiah (Jeremy)" "The Book of Susanna (in Daniel)" "The Prayer of Azariah" "The Prayer of Manasseh King of Judah" "The Book of Bel and the Dragon (in Daniel)")

FOapocryphaBooks=("Lagt aftur at Esterarbók fyrra" "Lagt aftur at Esterarbók seinna" "?" "Fyrru Makkabearabók" "Seinnu Makkabearabók" "Tobitsbók" "Juditarbók" "Vísdóm Sálomons" "Sírak" "Báruksbók" "Brævið frá Jeremia" "Súsanna (Dánjalsbók)" "Bøn Ázarja" "Bønina hjá Manasse" "Bel í Bábylon, Drekin í Bábylon (Dánjalsbók)")


function display_usage() {
  echo "Usage: bíblia [-e] [-l] [-f] <bók> <kap> <vers> <vers>" >&2 
  echo "Brúksháttur: bíblia les Guðs heilaga orð á terminalinum" >&2 
  echo "Options:"
  echo "    -e    Leita enska heiti á bókini"
  echo "    -l    Lista av øllum bøkrunum"
  echo "    -f    Finn ein setning ella ord í bíbluni, kjv og Dahl"
  echo "    -k    Leita í King James Version"
  echo "    -s    Samanber KJV við Dahl"
  echo "    -a    Leita í Apokrýfisku bókunum"
}

# Function to display books in two columns as a table
function display_books() {
  local num_books=${#books[@]}
  local num_columns=2
  local col_width=40

  for ((i = 0; i < num_books; i+=num_columns)); do
    local faroese=${books[i]}
    local english=${enBooks[i]}
    printf "%s\t%s\n" "$faroese" "$english"

    # Check if there's a second column
    local second_column_index=$((i + 1))
    if [ "$second_column_index" -lt "$num_books" ]; then
      local faroese=${books[second_column_index]}
      local english=${enBooks[second_column_index]}
      
      printf "%s\t%s\n" "$faroese" "$english"
    fi
  done    | column -t -s $'\t' -o ' | ' -c $((col_width * 2 + 3))
}

# Function to search for verses based on a given search string
function search_verses() {
  local search_string="$1"
  awk -F '\t' -v search="$search_string" '$4 ~ search {print $1" "$2" "$3" "$4}' biblia.tsv
}

function search_kjv_verses() {
  local search_string="$1"
  awk -F '\t' -v search="$search_string" '$6 ~ search {print $1" "$4" v"$5" "$6}' kjv.tsv
}

# Function to select a book from the list of matching books
function select_book_from_list() {
  local matching_books=("$@")
  local chosen_book

  PS3="Choose a book (enter number): "
  select chosen_book in "${matching_books[@]}"; do
    if [ -n "$chosen_book" ]; then
      break
    else
      echo "Invalid choice. Please select a number from the menu."
    fi
  done
  echo "$chosen_book" # Return the chosen book
}

function convertBookENtoFO(){
  # Convert the English book name to the corresponding Faroese book name
  local index=-1
  for ((i = 0; i < ${#enBooks[@]}; i++)); do if [ "${enBooks[i]}" = "$chosen_book" ]; then
      index=$i
      break
    fi
  done

  if [ "$index" -ne -1 ]; then
    faroese_name=${books[index]}
    chosen_book=$faroese_name
  else
    echo "Error: English book name not found."
    exit 1
  fi
  # exit en to fo function
}



function convertBookFOtoEN(){
  # Convert the Faroese book name to the corresponding English book name 
  local index=-1
  for ((i = 0; i < ${#books[@]}; i++)); do if [ "${books[i]}" = "$chosen_book" ]; then
      index=$i
      break
    fi
  done

  if [ "$index" -ne -1 ]; then
    english_name=${enBooks[index]}
    chosen_book=$english_name
  else
    echo "Error: Faroese book name not found."
    exit 1
  fi
  # exit en to fo function
}
#####################                          ##################
##################### Main program starts here ##################
#####################                          ##################

if [ $# -eq 0 ] ; then 
  display_usage
  exit 1 
fi 

use_english_books=false
listSearch=0
findBook=0
kjv=0
showAll=0
aprocry=0

while getopts "elfksa" opt; do
  case $opt in
    e ) use_english_books=true   ;;
    l ) listSearch=1             ;;
    f ) findBook=1               ;;
    k ) kjv=1                    ;;
    s ) showAll=1                ;;
    a ) aprocry=1                ;;
  esac
done
shift $(($OPTIND - 1))


search_term="$1"  # Use the first argument as the book
chapter="$2"      # Use the second argument as the chapter number
verse="$3"        # Use the third argument as the verse number
verse2="$4"        # Use the fourth argument as the verse number


# Check if the -l option is provided
if [ $listSearch -eq 1 ] && [ $aprocry -eq 0 ] ; then
  if [ -n "$1" ]; then
    # If search term is provided, iterate through both book arrays and grep approximate book names
    search_term=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    for ((i = 0; i < ${#books[@]}; i++)); do
      faroese=${books[i]}
      english=${enBooks[i]}
      if [[ "$(echo $faroese | tr '[:upper:]' '[:lower:]')" =~ "$search_term" ]] || [[ "$(echo $english | tr '[:upper:]' '[:lower:]')" =~ "$search_term" ]]; then
        printf "%s\t%s\n" "$faroese" "    $english"
      fi
    done | column -t -s $'\t' -o ' | ' -c $((col_width * 2 + 3))
  else
    # If no search term is provided, display all books in two columns
    display_books
  fi
fi


# Check if the -l option is provided
if [ $listSearch -eq 1 ] && [ $aprocry -eq 1 ] ; then
  if [ -n "$1" ]; then
    # If search term is provided, iterate through both book arrays and grep approximate book names
    search_term=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    for ((i = 0; i < ${#books[@]}; i++)); do
      faroese=${FOapocryphaBooks[i]}
      english=${apocryphaBooks[i]}
      if [[ "$(echo $faroese | tr '[:upper:]' '[:lower:]')" =~ "$search_term" ]] || [[ "$(echo $english | tr '[:upper:]' '[:lower:]')" =~ "$search_term" ]]; then
        printf "%s\t%s\n" "$faroese" "    $english"
      fi
    done | column -t -s $'\t' -o ' | ' -c $((col_width * 2 + 3))
  else
    # If no search term is provided, display all books in two columns
    num_books=${#apocryphaBooks[@]}
    num_columns=2
    col_width=40

    for ((i = 0; i < num_books; i+=num_columns)); do
      faroese=${FOapocryphaBooks[i]}
      english=${apocryphaBooks[i]}
      printf "%s\t%s\n" "$faroese" "$english"

      # Check if there's a second column
      second_column_index=$((i + 1))
      if [ "$second_column_index" -lt "$num_books" ]; then
        faroese=${FOapocryphaBooks[second_column_index]}
        english=${apocryphaBooks[second_column_index]}
        
        printf "%s\t%s\n" "$faroese" "$english"
      fi
    done    | column -t -s $'\t' -o ' | ' -c $((col_width * 2 + 3))
  fi
  exit 1
fi

# Check if the -f option is provided to search for a specific string
if [ $findBook -eq 1 ]; then
  if [ $# -eq 1 ] && [ $kjv -eq 0 ]; then
    search_verses "$1"
  elif [ $# -eq 1 ] && [ $kjv -eq 1 ]; then
    search_kjv_verses "$1"
  else
    echo "Usage: bíblia -f \"Search String\""
    exit 1
  fi
fi

# Check if the -e option is provided and book name is English 
if "$use_english_books" ; then

  # Create an array for matching en books
  ENmatching_books=()

  # Check for matches and add them to the array
  for enbook in "${enBooks[@]}"; do
    echo "$enbook" | grep -Fiq "$1"
    if echo "$enbook" | grep -Fiq "$1"; then
        ENmatching_books+=("$enbook")
    fi
  done

  # Check the number of matches
  num_matches="${#ENmatching_books[@]}"

  # If there are no matches, exit
  if [ "$num_matches" -eq 0 ]; then
      echo "Error: Invalid English book name provided."
      echo "No matches found for '$search_term'."
      exit 1
  fi

  # If there is only one match, store it in the variable directly
  if [ "$num_matches" -eq 1 ]; then
      chosen_book="${ENmatching_books[0]}"
  else
      # If there are multiple matches, prompt the user to choose one
      chosen_book=$(select_book_from_list "${ENmatching_books[@]}")      
  fi

  echo "EN: "$chosen_book
fi

############ Search Faroese books ############

# Create an array to store matches
matching_books=()
num_matches=0

if "$use_english_books" ; then
  # Convert the English book name to the corresponding Faroese book name
  convertBookENtoFO 
  search_term=$chosen_book
  echo "FO: "$chosen_book
fi

# Start searching the books and -f option is turned off
if [ ! -z "$1" ] && [[ $findBook -eq 0 ]] && [[ $listSearch -eq 0 ]] && [[ $aprocry -eq 0 ]] ; then

  if [ $kjv -eq 1 ] && "$use_english_books" ; then
    search_term=$chosen_book
  fi

  if [ "$num_matches" -eq 0 ]; then
  # Check for matches and add them to the array
    for book in "${books[@]}"; do
      if echo "$book" | grep -Fiq "$search_term"; then
          matching_books+=("$book")
      fi
    done
  fi

  # Check the number of matches
  num_matches="${#matching_books[@]}"

  # If there are no matches, exit
  if [ "$num_matches" -eq 0 ]; then
    echo "No matches found for '$search_term'."
    exit 1
  fi

  # If there is only one match, store it in the variable directly
  if [ "$num_matches" -eq 1 ]; then
    chosen_book="${matching_books[0]}"
  else
    # If there are multiple matches, prompt the user to choose one
    chosen_book=$(select_book_from_list "${matching_books[@]}")      
  fi

  if [ $kjv -eq 0 ] ; then
    # Use awk to extract the text for the given chapter and verse from the bible.tsv file
    if [ $# -eq 4 ] ; then
      # prints book, chapter and specific verse to another verse
      awk -F '\t' -v book="$chosen_book" -v chap="$chapter" -v vrs1="v$verse" -v vrs2="v$verse2" '
      function strip_v(verse) {
        sub(/^v/, "", verse)
        return verse
      }
      $1 == book && $2 == chap && strip_v($3) >= strip_v(vrs1) && strip_v($3) <= strip_v(vrs2) {
        verse = strip_v($3)
        print $3" "$4
        found=1
      }
      END { if (!found) print "einki vers funnid" }
      ' biblia.tsv
    fi

    if [ $# -eq 3 ] ; then
      # prints book, chapter and specifik verse
      awk -F '\t' -v book="$chosen_book" -v chap="$chapter" -v vrs="v$verse" '
      $1 == book && $2 == chap && $3 == vrs {
        print $3" "$4; found=1
      } 
      END { if (!found) print "einki vers funnid"}' biblia.tsv
    fi

    if [ $# -eq 2 ] ; then
      # prints book and specifik chapter 
      awk -F '\t' -v book="$chosen_book" -v chap="$chapter" '
      $1 == book && $2 == chap {
        print $3" "$4; found=1
      } 
      END { if (!found) print "einki vers funnid"}' biblia.tsv
    fi
    if [ $# -gt 4 ] ; then
      echo "Ov nógv arugmentir, kann ikki meira enn 4"
      echo "bíblia [-elf] [bók] [kap] [vers1] [vers2]"
    fi
  fi

fi

if [ $kjv -eq 1 ] && [ $findBook -eq 0 ] || [ $showAll -eq 1 ] ; then
  # Convert the Faroese book name to the corresponding English book name 
  convertBookFOtoEN 
fi
if [ $showAll -eq 1 ] ; then
  echo ""
  echo "King James Version"
fi
#####################                          ##################
##################### kjv program starts here  ##################
#####################                          ##################

if [[ kjv -eq 1 ]] || [ $showAll -eq 1 ]; then
  # chosen_book=$1
  # echo "Hello kjv"
  # echo "Nummar \$1 : "$1
  # echo "Nummar \$2 : "$2
  # echo "Nummar \$3 : "$3
  # echo "Nummar \$4 : "$4
  # echo "Nummar \$5 : "$5
  # echo "chosen book "$chosen_book 
  # echo "chosen chapt "$chapter 
  # echo "chosen verse "$verse 
  # echo "chosen verse2 "$verse2 
  # echo $# " hvørji args eru sett"
  # Use awk to extract the text for the given chapter and verse from the bible.tsv file
  if [ $# -eq 4 ] ; then
    # prints book, chapter and specific verse to another verse
    awk -F '\t' -v book="$chosen_book" -v chap="$chapter" -v vrs1="$verse" -v vrs2="$verse2" '
    function strip_v(verse) {
      sub(/^v/, "", verse)
      return verse
    }
    $1 == book && $4 == chap && strip_v($5) >= strip_v(vrs1) && strip_v($5) <= strip_v(vrs2) {
      verse = strip_v($5)
      print "v"$5" "$6
      found=1
    }
    END { if (!found) print "einki vers funnid" }
    ' kjv.tsv
  fi

  if [ $# -eq 3 ] ; then
    # prints book, chapter and specifik verse
    awk -F '\t' -v book="$chosen_book" -v chap="$chapter" -v vrs="$verse" '
    $1 == book && $4 == chap && $5 == vrs {
      print "v"$5" "$6; found=1
    } 
    END { if (!found) print "einki vers funnid"}' kjv.tsv
    #awk -F '\t' -v book="$chosen_book" -v chap="$chapter" -v vrs="v$verse" '$1 == book && $4 == chap && $5 == vrs {print $5" "$6}' kjv.tsv
  fi

  if [ $# -eq 2 ] ; then
    # prints book and specifik chapter 
    awk -F '\t' -v book="$chosen_book" -v chap="$chapter" '
    $1 == book && $4 == chap {
      print "v"$5" "$6; found=1
    } 
    END { if (!found) print "einki vers funnid"}' kjv.tsv
  fi
  if [ $# -gt 4 ] ; then
    echo "Ov nógv arugmentir, kann ikki meira enn 4"
    echo "bíblia [-elf] [bók] [kap] [vers1] [vers2]"
  fi
fi

if [[ aprocry -eq 1 ]] ; then
  # Create an array to store matches
  matching_books=()
  num_matches=0

  if [ "$num_matches" -eq 0 ]; then
  # Check for matches and add them to the array
    for book in "${apocryphaBooks[@]}"; do
      if echo "$book" | grep -Fiq "$search_term"; then
          matching_books+=("$book")
      fi
    done
  fi

  # Check the number of matches
  num_matches="${#matching_books[@]}"

  # If there are no matches, exit
  if [ "$num_matches" -eq 0 ]; then
    echo "No matches found for '$search_term'."
    exit 1
  fi

  # If there is only one match, store it in the variable directly
  if [ "$num_matches" -eq 1 ]; then
    chosen_book="${matching_books[0]}"
  else
    # If there are multiple matches, prompt the user to choose one
    chosen_book=$(select_book_from_list "${matching_books[@]}")      
  fi

  # chosen_book=$1
  # echo "Hello kjv"
  # echo "Nummar \$1 : "$1
  # echo "Nummar \$2 : "$2
  # echo "Nummar \$3 : "$3
  # echo "Nummar \$4 : "$4
  # echo "Nummar \$5 : "$5
  # echo "chosen book "$chosen_book 
  # echo "chosen chapt "$chapter 
  # echo "chosen verse "$verse 
  # echo "chosen verse2 "$verse2 
  # echo $# " hvørji args eru sett"
  # Use awk to extract the text for the given chapter and verse from the bible.tsv file
  if [ $# -eq 4 ] ; then
    # prints book, chapter and specific verse to another verse
    awk -F '\t' -v book="$chosen_book" -v chap="$chapter" -v vrs1="$verse" -v vrs2="$verse2" '
    function strip_v(verse) {
      sub(/^v/, "", verse)
      return verse
    }
    $1 == book && $3 == chap && strip_v($4) >= strip_v(vrs1) && strip_v($4) <= strip_v(vrs2) {
      verse = strip_v($4)
      print "v"$4" "$5
      found=1
    }
    END { if (!found) print "einki vers funnid" }
    ' apoc.tsv
  fi

  if [ $# -eq 3 ] ; then
    # prints book, chapter and specifik verse
    awk -F '\t' -v book="$chosen_book" -v chap="$chapter" -v vrs="$verse" '
    $1 == book && $3 == chap && $4 == vrs {
      print "v"$4" "$5; found=1
    } 
    END { if (!found) print "einki vers funnid"}' apoc.tsv
    #awk -F '\t' -v book="$chosen_book" -v chap="$chapter" -v vrs="v$verse" '$1 == book && $4 == chap && $5 == vrs {print $5" "$6}' kjv.tsv
  fi

  if [ $# -eq 2 ] ; then
    # prints book and specifik chapter 
    awk -F '\t' -v book="$chosen_book" -v chap="$chapter" '
    $1 == book && $3 == chap {
      print "v"$4" "$5; found=1
    } 
    END { if (!found) print "einki vers funnid"}' apoc.tsv
  fi
  if [ $# -gt 4 ] ; then
    echo "Ov nógv arugmentir, kann ikki meira enn 4"
    echo "bíblia [-elf] [bók] [kap] [vers1] [vers2]"
  fi
fi
